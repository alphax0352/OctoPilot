// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String            @id @default(cuid())
  userId                String
  provider              String
  providerAccountId     String
  type                  String
  refresh_token         String?           @db.Text
  access_token          String?           @db.Text
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?           @db.Text
  session_state         String?
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id                    String            @id @default(cuid())
  sessionToken          String            @unique
  userId                String
  expires               DateTime
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                    String            @id @default(cuid())
  name                  String
  email                 String            @unique
  password              String?
  image                 String?
  emailVerified         DateTime?
  isVerified            Boolean           @default(false)
  accounts              Account[]
  sessions              Session[]
  applications          Application[]
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  lastActiveAt          DateTime          @default(now())
  mainInfo              MainInfo?
  employmentHistory     EmploymentHistory[]
  educationInfo         EducationInfo?
  resumeWriterPrompt    String?
  coverLetterPrompt     String?
  resumeTemplatePath    String?

  @@map("users")
}

model MainInfo {
  id                    String            @id @default(cuid())
  userId                String            @unique
  name                  String?
  email                 String?
  phone                 String?
  location              String?
  linkedin              String?
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("main_info")
}

model EducationInfo {
  id                    String            @id @default(cuid())
  userId                String            @unique
  school                String?
  degree                String?
  from                  String?
  to                    String?
  location              String?
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("education_info")
}

model Application {
  id                    Int               @id @default(autoincrement())
  userId                String
  title                 String
  company               String
  description           String
  resumePath            String?
  coverLetter           String?
  status                ApplicationStatus @default(APPLIED)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("applications")
}

model EmploymentHistory {
  id                    Int               @id @default(autoincrement())
  userId                String
  company               String?
  title                 String?
  from                  String?
  to                    String?
  location              String?
  description           String?
  // projects              String?
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("employment_history")
}

enum ApplicationStatus {
  APPLIED
  INTRO
  STEP_2
  STEP_3
  STEP_4
  STEP_5
  STEP_6
  FINAL
  ONBOARDING
  REJECTED
}

